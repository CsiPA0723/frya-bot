import { uuidString, markdownString, dateTimeString } from "./common";

export type Message = {
  /** The ID of the message (uuid) */
  id: uuidString;
  /** The type of chat message. "system" messages are generated by Guilded, while "default" messages are user or bot-generated. */
  type: "default" | "system";
  /** The ID of the server */
  serverId?: string;
  /** The ID of the channel (uuid) */
  channelId: uuidString;
  /** The content of the message (markdown) */
  content?: markdownString;
  /** (min items 1; max items 10) */
  embeds?: ChatEmbed[];
  /** Message IDs that were replied to (min items 1; max items 5) */
  replyMessageIds?: uuidString[];
  /** If set, this message will only be seen by those mentioned or replied to */
  isPrivate?: boolean;
  /** The ISO 8601 timestamp that the message was created at */
  createdAt: dateTimeString;
  /** The ID of the user who created this message (Note: If this event has createdByWebhookId present, this field will still be populated, but can be ignored. In this case, the value of this field will always be Ann6LewA) */
  createdBy: string;
  /** The ID of the webhook who created this message, if it was created by a webhook */
  createdByWebhookId?: string;
  /** The ISO 8601 timestamp that the message was updated at, if relevant */
  updatedAt?: dateTimeString;
};

export type Post = {
  /** If set, this message will only be seen by those mentioned or replied to */
  isPrivate?: boolean;
  /** If set, this message will not notify any mentioned users or roles */
  isSilent?: boolean;
  /** Message IDs to reply to (min items 1; max items 5) */
  replyMessageIds?: uuidString[];
  /** The content of the message (min length 1; max length 4000) */
  content?: markdownString;
  /** At this time, only one embed is supported per message, and attachments are not supported. If you need to send more than one embed or upload attachments, consider creating the message via a webhook. (min items 1; max items 1) */
  embeds?: ChatEmbed[];
};

type EventData = {
  /** The ID of the server */
  serverId: string;
  message: Message;
};

export type ChatMessageCreated = EventData;
export type ChatMessageUpdated = EventData;
export type ChatMessageDeleted = EventData["serverId"] &
  Message["id"] &
  Message["serverId"] &
  Message["channelId"] &
  Message["isPrivate"] & {
    /** The ISO 8601 timestamp that the message was deleted at */
    deletedAt: dateTimeString;
  };
